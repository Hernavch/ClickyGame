{"version":3,"sources":["logo.svg","components/Jumbotron/index.js","components/Images/images.js","components/Wrapper/index.js","components/Table/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Jumbotron","_ref","children","score","react_default","a","createElement","style","height","clear","paddingTop","textAlign","className","ImageCard","props","id","onClick","totalClick","alt","name","src","image","Wrapper","Table","Header","App","state","characters","clickedImages","this","includes","setState","concat","Object","toConsumableArray","sort","Math","random","_this2","components_Wrapper","components_Jumbotron","components_Table","map","f","components_Images_images","occupation","handleShuffle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8lEAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oOCezBC,MAZf,SAAAC,GAAqCA,EAAjBC,SAAiB,IAARC,EAAQF,EAARE,MAC3B,OAAQC,EAAAC,EAAAC,cAAA,OACJC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAQC,WAAY,IAAKC,UAAW,UACjEC,UAAU,aAEZR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SAAf,UACQT,kBCSGU,MAZf,SAAmBC,GAEf,OAAOV,EAAAC,EAAAC,cAAA,OAAKM,UAAU,cAAcG,GAAG,YAAYC,QAASF,EAAMG,YACxDb,EAAAC,EAAAC,cAAA,OAAKM,UAAU,eAAeM,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,QAC1DjB,EAAAC,EAAAC,cAAA,MAAIM,UAAU,cAAcE,EAAMK,QCDjCG,MANf,SAAiBR,GACf,OAAOV,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WAAWE,EAAMZ,WCW1BqB,MAZf,SAAeT,GACb,OAAOV,EAAAC,EAAAC,cAAA,OAAKM,UAAU,yBAEtBR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,MAAMG,GAAG,cAErBD,EAAMZ,YCGIsB,IC4CAC,6MA5CbC,MAAQ,CACJC,WAAWA,EACXxB,MAAM,EACNyB,cAAc,iFAEJb,GACPc,KAAKH,MAAME,cAAcE,SAASf,IACrCc,KAAKE,SAAS,CACZ5B,MAAO0B,KAAKH,MAAMvB,MAAQ,EAC1ByB,cAAa,GAAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAMJ,KAAKH,MAAME,eAAjB,CAAgCb,MAGjDc,KAAKE,SAAS,CACZJ,WAAYA,EAAWQ,KAAK,kBAAMC,KAAKC,SAAW,KAClDpB,WAAYY,KAAKH,MAAMT,WAAa,qCAGhC,IAAAqB,EAAAT,KAEN,OACCzB,EAAAC,EAAAC,cAACiC,EAAD,KACCnC,EAAAC,EAAAC,cAACkC,EAAD,CAAWrC,MAAO0B,KAAKH,MAAMvB,QAE7BC,EAAAC,EAAAC,cAACmC,EAAD,KAEEZ,KAAKH,MAAMC,WAAWe,IAAI,SAAAC,GAAC,OAC1BvC,EAAAC,EAAAC,cAACsC,EAAD,CACCzB,KAAMwB,EAAExB,KACRE,MAAOsB,EAAEtB,MACTwB,WAAYF,EAAEE,WACd5B,WAAY,kBAAMqB,EAAKQ,cAAcH,EAAE5B,kBA/B/BgC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b4d105df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./jumbotron.css\"\r\n\r\nfunction Jumbotron({children,score}) {\r\n  return (<div\r\n      style={{ height: 300, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n      className=\"jumbotron\"\r\n    >\r\n    <div className=\"score\">\r\n    SCORE: {score}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport './images.css';\r\n\r\n\r\n// import Characters from 'characters';\r\n\r\nfunction ImageCard(props){\r\n    \r\n    return(<div className=\"card col-2 \" id=\"imageCard\" onClick={props.totalClick}>\r\n              <img className=\"card-img-top\" alt={props.name} src={props.image}/>\r\n              <h5 className=\"card-title\">{props.name}</h5>\r\n\r\n       \r\n           </div>\r\n      \r\n    )\r\n}\r\n\r\nexport default ImageCard;","import React from \"react\";\r\n\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}\r\n  </div>\r\n\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\n\r\nfunction Table(props) {\r\n  return <div className=\"container-fluid table\">\r\n    \r\n  <div className=\"row\" id=\"cardHolder\">\r\n     \r\n    {props.children}\r\n  </div>\r\n\r\n  \r\n  </div>;\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\n\r\n\r\nfunction Header({ children, score}) {\r\n  return ( <div className=\"score\">\r\n      {score}\r\n      </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport characters from './characters.json';\nimport ImageCard from './components/Images/images';\nimport Wrapper from './components/Wrapper';\nimport Table from './components/Table';\nimport Header from './components/Header'\n\nclass App extends React.Component {\n  state = {\n      characters:characters,\n      score:0,\n      clickedImages:[],\n    }\n  handleShuffle(id) {\n    if (!this.state.clickedImages.includes(id)) {\n      this.setState({\n        score: this.state.score + 1,\n        clickedImages: [...this.state.clickedImages, id]\n      });\n    }\n    this.setState({\n      characters: characters.sort(() => Math.random() - 0.5),\n      totalClick: this.state.totalClick + 1\n    });\n  }\n  render(){\n\n    return (\n     <Wrapper>\n      <Jumbotron score={this.state.score}/> \n      \n      <Table>\n        \n       {this.state.characters.map(f=>(\n         <ImageCard \n          name={f.name}\n          image={f.image}\n          occupation={f.occupation}\n          totalClick={() => this.handleShuffle(f.id)}\n           />\n       ))}\n         </Table>\n       \n     </Wrapper>\n       \n           );\n  }\n \n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}